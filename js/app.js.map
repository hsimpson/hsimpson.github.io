{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/shaders/particle.frag","app.js","src/shaders/particle.vert","src/shaders/particle_compute.comp","src/ts/app.ts","src/ts/boundingBox.ts","src/ts/crossHair.ts","src/ts/particleEngine.ts","src/ts/particleRenderer.ts","src/ts/settingsGui.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","2","3","4","Object","defineProperty","value","fontawesome_svg_core_1","free_solid_svg_icons_1","$","particleEngine_1","document","addEventListener","library","add","faBars","faTimesCircle","dom","watch","engine","ParticleEngine","supportsWebGL2WithCompute","webgl2ComputeSpec","googleGroupUrl","webgl2ComputDemos","body","html","createScene","startRender","./particleEngine","@fortawesome/fontawesome-svg-core","@fortawesome/free-solid-svg-icons","jquery","5","THREE","BoundingBox","[object Object]","dimensions","scene","w","h","halfX","x","halfY","y","halfZ","z","v0","Vector3","v1","v2","v3","v4","v5","v6","v7","this","_lineMaterial","LineMaterial","color","linewidth","lineGeometry","LineGeometry","positions","setPositions","boxMesh","Line2","computeLineDistances","resize","resolution","set","THREE.LineMaterial","THREE.LineSegmentsGeometry","THREE.Wireframe","THREE.WireframeGeometry2","three","6","CrossHair","bounding","settingsObject","_leftPressed","_rightPressed","_forwardPressed","_backPressed","_upPressed","_downPressed","_movementSpeed","_settingsObject","_halfBounding","clone","multiplyScalar","_negativeHalfBounding","_crossHair","Object3D","_xAxisMat","_yAxisMat","_zAxisMat","xAxisGeometry","yAxisGeometry","zAxisGeometry","event","key","forceActive","newPosition","forcePosition","position","copy","THREE.Line2","THREE.LineGeometry","THREE.LineSegments2","7","window","boundingBox_1","crossHair_1","particleRenderer_1","settingsGui_1","canvasId","_boundingBoxDimension","_elapsed","_canvas","getElementById","_gl","getContext","antialias","_settingsGui","SettingsGui","clientWidth","clientHeight","_scene","Scene","_camera","PerspectiveCamera","_renderer","WebGLRenderer","canvas","context","setPixelRatio","devicePixelRatio","setClearColor","setSize","_boundingBox","getSettings","_controls","TrackballControls","rotateSpeed","zoomSpeed","panSpeed","noZoom","noPan","staticMoving","dynamicDampingFactor","keys","_particleRender","ParticleRenderer","init","animate","aspect","updateProjectionMatrix","time","requestAnimationFrame","now","performance","delta","update","updateFrames","render","state","reset","./boundingBox","./crossHair","./particleRenderer","./settingsGui","THREE.TrackballControls","8","camera","_particleCount","_lastTime","_threeCamera","_logComputeThings","computeShaderSource","computeShader","createShader","COMPUTE_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","_computeProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","_initLoc","getUniformLocation","_particleCountLoc","_boundingBoxLoc","_deltaTimeLoc","_gravityLoc","_forceOnLoc","_forcePositionsloc","_forceLoc","_vao","createVertexArray","_posBuffer","createBuffer","_velBuffer","particleVertexShaderSource","particleVertexShader","VERTEX_SHADER","log","particleFragmentShaderSource","particleFragmentShader","FRAGMENT_SHADER","_shadingProgram","bindVertexArray","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","_projectionMatrixLoc","_viewMatrixLoc","_colorLoc","_pointSizeLoc","enable","BLEND","blendFunc","SRC_ALPHA","ONE","duration","runmode","_resizeBuffers","useProgram","uniform1ui","uniform3fv","toArray","uniform1f","gravity","force","dispatchCompute","_dispatchGroups","memoryBarrier","VERTEX_ATTRIB_ARRAY_BARRIER_BIT","uniformMatrix4fv","projectionMatrix","matrixWorldInverse","uniform4fv","particleSize","drawArrays","POINTS","maxComputeWorkGroupCount","maxComputeWorkGroupSize","push","getIndexedParameter","MAX_COMPUTE_WORK_GROUP_COUNT","MAX_COMPUTE_WORK_GROUP_SIZE","join","getParameter","MAX_COMPUTE_WORK_GROUP_INVOCATIONS","newParticleCount","Math","pow","particlesPerDimension","trunc","SHADER_STORAGE_BUFFER","bufferData","Float32Array","DYNAMIC_COPY","bindBufferBase","vertices","dx","dy","dz","px","py","pz","vi","../shaders/particle.frag","../shaders/particle.vert","../shaders/particle_compute.comp","9","Picker","_settingsButton","_settingsPanel","_particleCountSlider","find","_particleCountText","_gravitySlider","_gravityText","_particleSizeSlider","_particleSizeText","_forceSlider","_forceText","_perf","_totalParticle","_colorPicker","parent","popup","alpha","editor","onChange","rgba","_settings","on","settingsButtonIcon","toggleClass","setDefault","val","updateGUI","toFixed","Vector4","toString","toLocaleString","setColor","vanilla-picker"],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports = \"#version 300 es\\n// particle.frag\\n\\nprecision highp float;\\n\\nout vec4 FragColor;\\n\\nin vec4 color;\\n\\nvoid main(void) {\\n  FragColor = color;\\n}\\n\";\n",null,"module.exports = \"#version 300 es\\n// particle.vert\\n\\nlayout(location = 0) in vec4 a_position;\\n\\nuniform mat4 u_projectionMatrix;\\nuniform mat4 u_viewMatrix;\\nuniform vec4  u_color;\\nuniform float u_pointSize;\\n\\nout vec4 color;\\n\\nvoid main(void) {\\n  color = u_color;\\n  // gl_Position = u_projectionMatrix * u_viewMatrix * vec4(a_position.x, 0.0, 0.0, 1.0);\\n  gl_Position  = u_projectionMatrix * u_viewMatrix * vec4(a_position.xyz, 1.0);\\n  gl_PointSize = u_pointSize;\\n}\\n\";\n","module.exports = \"#version 310 es\\n// particle compute shader\\n\\nlayout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;\\n\\nlayout(std430, binding = 0) buffer Pos {\\n  vec4 positions[];\\n}\\npos;\\n\\nlayout(std430, binding = 1) buffer Vel {\\n  vec4 velocities[];\\n}\\nvel;\\n\\nuniform uint uiInit;\\nuniform uint uiParticleCount;\\nuniform vec3  v3BoundingBox;\\nuniform float fDeltaTime;\\nuniform float fGravity;\\nuniform uint uiForce;\\nuniform vec3  v3ForcePostion;\\nuniform float fForce;\\n\\nvoid init(uint threadIndex) {\\n  // calc the cubic root of particle count\\n\\n  float n = pow(float(uiParticleCount), (1.0 / 3.0));\\n\\n  uint  uiN          = uint(n);\\n  float fthreadIndex = float(threadIndex);\\n\\n  float dx = v3BoundingBox.x / (n + 1.0);\\n  float dy = v3BoundingBox.y / (n + 1.0);\\n  float dz = v3BoundingBox.z / (n + 1.0);\\n\\n  uint modX = threadIndex % uiN;\\n  uint modY = (threadIndex / uiN) % uiN;\\n  uint modZ = (threadIndex / (uiN * uiN)) % uiN;\\n\\n  float px = float(modX) * dx + dx - (v3BoundingBox.x / 2.0);\\n  float py = float(modY) * dy + dy - (v3BoundingBox.y / 2.0);\\n  float pz = float(modZ) * dz + dz - (v3BoundingBox.z / 2.0);\\n\\n  // Semi-random velocities\\n  float vx = cos(1234.0 * fthreadIndex);\\n  float vy = sin(1234.0 * fthreadIndex);\\n  float vz = cos(1234.0 * fthreadIndex);\\n\\n  // Save position and velocity\\n  pos.positions[threadIndex].x = px;\\n  pos.positions[threadIndex].y = py;\\n  pos.positions[threadIndex].z = pz;\\n\\n  vel.velocities[threadIndex].x = vx;\\n  vel.velocities[threadIndex].y = vy;\\n  vel.velocities[threadIndex].z = vz;\\n}\\n\\nvoid main() {\\n  uint threadIndex = gl_GlobalInvocationID.x;\\n\\n  if (uiInit == 1u) {\\n    init(threadIndex);\\n    return;\\n  }\\n\\n  vec3 position = pos.positions[threadIndex].xyz;\\n  vec3 velocity = vel.velocities[threadIndex].xyz;\\n\\n  // Update Particle positions\\n  position += velocity * fDeltaTime;\\n\\n  // Add in fGravity\\n  velocity.y -= fGravity * fDeltaTime;\\n\\n  vec3 v3BB_half = v3BoundingBox / 2.0;\\n\\n  // Edge Collision Detection\\n  if (position.x < -v3BB_half.x) {  // LEFT\\n    position.x = -2.0 * v3BB_half.x - position.x;\\n    velocity.x *= -0.9;\\n  } else if (position.x > v3BB_half.x) {  // RIGHT\\n    position.x = 2.0 * v3BB_half.x - position.x;\\n    velocity.x *= -0.9;\\n  }\\n\\n  if (position.y < -v3BB_half.y) {  // BOTTOM\\n    position.y = -2.0 * v3BB_half.y - position.y;\\n    velocity.y *= -0.45;  // if its on the bottom we extra dampen\\n    velocity.x *= 0.9;\\n  } else if (position.y > v3BB_half.y) {  // TOP\\n    position.y = 2.0 * v3BB_half.y - position.y;\\n    velocity.y *= -0.9;\\n  }\\n\\n  if (position.z < -v3BB_half.z) {  // FRONT\\n    position.z = -2.0 * v3BB_half.z - position.z;\\n    velocity.z *= -0.9;\\n  } else if (position.z > v3BB_half.z) {  // BACK\\n    position.z = 2.0 * v3BB_half.z - position.z;\\n    velocity.z *= -0.9;\\n  }\\n\\n  // include force\\n  if (uiForce != 0u) {\\n    vec3  d    = v3ForcePostion - position;\\n    float dist = sqrt(d.x * d.x + d.y * d.y + d.z * d.z);\\n    if (dist < 1.0) {\\n      dist = 1.0;  // This line prevents anything that is really close from\\n                   // getting a huge force\\n    }\\n\\n    velocity += d / dist * fForce / dist;\\n  }\\n\\n  // update the arrays with our newly computed values\\n  pos.positions[threadIndex].xyz  = position;\\n  vel.velocities[threadIndex].xyz = velocity;\\n}\\n\";\n","import { dom, library } from '@fortawesome/fontawesome-svg-core';\nimport { faBars, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport * as $ from 'jquery';\nimport { ParticleEngine } from './particleEngine';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // We are only using the user-astronaut icon\n  library.add(faBars, faTimesCircle);\n\n  // Replace any existing <i> tags with <svg> and set up a MutationObserver to\n  // continue doing this as the DOM changes.\n  dom.watch();\n\n  const engine = new ParticleEngine('renderCanvas');\n\n  if (!engine.supportsWebGL2WithCompute()) {\n    const webgl2ComputeSpec = 'https://www.khronos.org/registry/webgl/specs/latest/2.0-compute/';\n    const googleGroupUrl = 'https://groups.google.com/a/chromium.org/d/topic/blink-dev/bPD47wqY-r8/discussion';\n    const webgl2ComputDemos = 'https://github.com/9ballsyndrome/WebGL_Compute_shader';\n\n    $(document.body).html(`\n      <div id=\"noWebGL2WithCompute\">\n        Your browser does not support WebGL 2.0 Compute Shader<br>\n        You need a browser like Chrome Canary or Edge Canary<br>\n        <br>\n        <br>\n        To setup this browser you need some flags:\n        <ul>\n          <li>\n            <p><code>--enable-webgl2-compute-context</code><br>\n            Enable WebGL Compute shader, WebGL2ComputeRenderingContext<br>\n            Or you can enable this flag via about://flags/ if using the corresponding version, choose \"WebGL 2.0 Compute\"</p>\n          </li>\n          <li>\n            <p><code>--use-angle=gl</code><br>\n            Run ANGLE with OpenGL backend because Shader Storage Buffer Object is now on implementing and there are some use cases which do not work well on D3D backend yet<br>\n            Some demos in this page need this flag<br>\n            Or you can enable this flag via about://flags/, choose \"Choose ANGLE graphics backend\"</p>\n          </li>\n          <li>\n            <p><code>--use-cmd-decoder=passthrough</code><br>\n            In some environments, it could run well only after adding this flag. So try this if could not work with above two flags</p>\n          </li>\n        </ul>\n\n        <br>\n        Additional information:<br>\n        <ul>\n          <li><a href=\"${webgl2ComputeSpec}\">WebGL 2.0 Compute Specification</a></li>\n          <li><a href=\"${googleGroupUrl}\">Google Groups discussion</a></li>\n          <li><a href=\"${webgl2ComputDemos}\">WebGL 2.0 Compute shader Demos</a></li>\n        </ul>\n      </div>\n    `);\n  }\n\n  // Create the scene\n  if (engine.createScene()) {\n    // start rendering\n    engine.startRender();\n  }\n});\n","import * as THREE from 'three';\n\nrequire('THREE.LineMaterial'); // tslint:disable-line:no-var-requires\nrequire('THREE.LineSegmentsGeometry'); // tslint:disable-line:no-var-requires\nrequire('THREE.WireframeGeometry2'); // tslint:disable-line:no-var-requires\nrequire('THREE.Wireframe'); // tslint:disable-line:no-var-requires\n\n/* the cube:\n\n      v5-----------v6\n     / |          / |\n   /   |         /  |\n   v2----------v1   |\n   |   |        |   |\n   |   |        |   |\n   |  v4--------|--v7\n   | /          |  /\n   |/           | /\n   v3-----------v0\n\n*/\n\nexport class BoundingBox {\n  private _lineMaterial: THREE.LineMaterial;\n\n  constructor(dimensions: THREE.Vector3, scene: THREE.Scene, w: number, h: number) {\n    const halfX = dimensions.x / 2.0;\n    const halfY = dimensions.y / 2.0;\n    const halfZ = dimensions.z / 2.0;\n\n    // front vertices\n    const v0 = new THREE.Vector3(halfX, -halfY, halfZ);\n    const v1 = new THREE.Vector3(halfX, halfY, halfZ);\n    const v2 = new THREE.Vector3(-halfX, halfY, halfZ);\n    const v3 = new THREE.Vector3(-halfX, -halfY, halfZ);\n\n    // back vertices\n    const v4 = new THREE.Vector3(-halfX, -halfY, -halfZ);\n    const v5 = new THREE.Vector3(-halfX, halfY, -halfZ);\n    const v6 = new THREE.Vector3(halfX, halfY, -halfZ);\n    const v7 = new THREE.Vector3(halfX, -halfY, -halfZ);\n\n    this._lineMaterial = new THREE.LineMaterial({\n      color: 0xffffff,\n      linewidth: 3.0\n    });\n\n    const lineGeometry = new THREE.LineGeometry();\n\n    // prettier-ignore\n    const positions = [\n      // fron\n      v0.x, v0.y, v0.z, v1.x, v1.y, v1.z,\n      v1.x, v1.y, v1.z, v2.x, v2.y, v2.z,\n      v2.x, v2.y, v2.z, v3.x, v3.y, v3.z,\n      v3.x, v3.y, v3.z, v0.x, v0.y, v0.z,\n\n      // left\n      v3.x, v3.y, v3.z, v2.x, v2.y, v2.z,\n      v2.x, v2.y, v2.z, v5.x, v5.y, v5.z,\n      v5.x, v5.y, v5.z, v4.x, v4.y, v4.z,\n      v4.x, v4.y, v4.z, v3.x, v3.y, v3.z,\n\n      // right\n      v0.x, v0.y, v0.z, v7.x, v7.y, v7.z,\n      v7.x, v7.y, v7.z, v6.x, v6.y, v6.z,\n      v6.x, v6.y, v6.z, v1.x, v1.y, v1.z,\n      v1.x, v1.y, v1.z, v0.x, v0.y, v0.z,\n\n      // back\n      v7.x, v7.y, v7.z, v4.x, v4.y, v4.z,\n      v4.x, v4.y, v4.z, v5.x, v5.y, v5.z,\n      v5.x, v5.y, v5.z, v6.x, v6.y, v6.z,\n      v6.x, v6.y, v6.z, v7.x, v7.y, v7.z,\n    ];\n    lineGeometry.setPositions(positions);\n\n    const boxMesh = new THREE.Line2(lineGeometry, this._lineMaterial);\n    boxMesh.computeLineDistances();\n\n    scene.add(boxMesh);\n    this.resize(w, h);\n  }\n\n  public resize(w: number, h: number): void {\n    this._lineMaterial.resolution.set(w, h);\n  }\n}\n","import * as THREE from 'three';\nimport { ISettings } from './settingsGui';\n\nrequire('THREE.LineMaterial'); // tslint:disable-line:no-var-requires\nrequire('THREE.LineSegmentsGeometry'); // tslint:disable-line:no-var-requires\nrequire('THREE.LineGeometry'); // tslint:disable-line:no-var-requires\nrequire('THREE.LineSegments2'); // tslint:disable-line:no-var-requires\nrequire('THREE.Line2'); // tslint:disable-line:no-var-requires\n\nexport class CrossHair {\n  private _crossHair: THREE.Object3D;\n  private _halfBounding: THREE.Vector3;\n  private _negativeHalfBounding: THREE.Vector3;\n\n  private _leftPressed: boolean = false;\n  private _rightPressed: boolean = false;\n  private _forwardPressed: boolean = false;\n  private _backPressed: boolean = false;\n  private _upPressed: boolean = false;\n  private _downPressed: boolean = false;\n  private _movementSpeed: number = 0.1;\n  private _settingsObject: ISettings;\n\n  private _xAxisMat: THREE.LineMaterial;\n  private _yAxisMat: THREE.LineMaterial;\n  private _zAxisMat: THREE.LineMaterial;\n\n  constructor(\n    dimensions: THREE.Vector3,\n    bounding: THREE.Vector3,\n    scene: THREE.Scene,\n    settingsObject: ISettings,\n    w: number,\n    h: number\n  ) {\n    this._settingsObject = settingsObject;\n    this._halfBounding = bounding.clone().multiplyScalar(0.5);\n    this._negativeHalfBounding = this._halfBounding.clone().multiplyScalar(-1.0);\n\n    this._crossHair = new THREE.Object3D();\n    scene.add(this._crossHair);\n\n    this._xAxisMat = new THREE.LineMaterial({\n      color: 0xff0000,\n      linewidth: 2.0\n    });\n    this._yAxisMat = new THREE.LineMaterial({\n      color: 0x00ff00,\n      linewidth: 2.0\n    });\n    this._zAxisMat = new THREE.LineMaterial({\n      color: 0x0000ff,\n      linewidth: 2.0\n    });\n\n    this.resize(w, h);\n\n    const xAxisGeometry = new THREE.LineGeometry();\n    xAxisGeometry.setPositions([-dimensions.x / 2, 0.0, 0.0, dimensions.x / 2, 0.0, 0.0]);\n\n    const yAxisGeometry = new THREE.LineGeometry();\n    yAxisGeometry.setPositions([0.0, -dimensions.y / 2, 0.0, 0.0, dimensions.y / 2, 0.0]);\n\n    const zAxisGeometry = new THREE.LineGeometry();\n    zAxisGeometry.setPositions([0.0, 0.0, -dimensions.z / 2, 0.0, 0.0, dimensions.z / 2]);\n\n    /*\n    const xAxis = new THREE.Line2(xAxisGeometry, xAxisMat);\n    xAxis.computeLineDistances();\n    xAxis.scale.set(1, 1, 1);\n    */\n\n    this._crossHair.add(new THREE.Line2(xAxisGeometry, this._xAxisMat));\n    this._crossHair.add(new THREE.Line2(yAxisGeometry, this._yAxisMat));\n    this._crossHair.add(new THREE.Line2(zAxisGeometry, this._zAxisMat));\n\n    document.addEventListener('keydown', (event: KeyboardEvent) => {\n      if (event.key === ' ') {\n        this._settingsObject.forceActive = true;\n        this._xAxisMat.linewidth = this._yAxisMat.linewidth = this._zAxisMat.linewidth = 5.0;\n      }\n      if (event.key === 'a') {\n        this._leftPressed = true;\n      }\n      if (event.key === 's') {\n        this._backPressed = true;\n      }\n      if (event.key === 'd') {\n        this._rightPressed = true;\n      }\n      if (event.key === 'w') {\n        this._forwardPressed = true;\n      }\n      if (event.key === 'PageUp') {\n        this._upPressed = true;\n      }\n      if (event.key === 'PageDown') {\n        this._downPressed = true;\n      }\n    });\n\n    document.addEventListener('keyup', (event: KeyboardEvent) => {\n      if (event.key === ' ') {\n        this._settingsObject.forceActive = false;\n        this._xAxisMat.linewidth = this._yAxisMat.linewidth = this._zAxisMat.linewidth = 2.0;\n      }\n      if (event.key === 'a') {\n        this._leftPressed = false;\n      }\n      if (event.key === 's') {\n        this._backPressed = false;\n      }\n      if (event.key === 'd') {\n        this._rightPressed = false;\n      }\n      if (event.key === 'w') {\n        this._forwardPressed = false;\n      }\n      if (event.key === 'PageUp') {\n        this._upPressed = false;\n      }\n      if (event.key === 'PageDown') {\n        this._downPressed = false;\n      }\n    });\n  }\n\n  public update(): void {\n    const newPosition: THREE.Vector3 = this._settingsObject.forcePosition.clone();\n\n    if (this._leftPressed) {\n      newPosition.x -= this._movementSpeed;\n    }\n    if (this._rightPressed) {\n      newPosition.x += this._movementSpeed;\n    }\n    if (this._forwardPressed) {\n      newPosition.z -= this._movementSpeed;\n    }\n    if (this._backPressed) {\n      newPosition.z += this._movementSpeed;\n    }\n    if (this._upPressed) {\n      newPosition.y += this._movementSpeed;\n    }\n    if (this._downPressed) {\n      newPosition.y -= this._movementSpeed;\n    }\n\n    const epsilon = 0.001;\n\n    if (\n      newPosition.x >= this._negativeHalfBounding.x - epsilon &&\n      newPosition.x <= this._halfBounding.x + epsilon &&\n      newPosition.y >= this._negativeHalfBounding.y - epsilon &&\n      newPosition.y <= this._halfBounding.y + epsilon &&\n      newPosition.z >= this._negativeHalfBounding.z - epsilon &&\n      newPosition.z <= this._halfBounding.z + epsilon\n    ) {\n      this._crossHair.position.copy(newPosition);\n      this._settingsObject.forcePosition.copy(newPosition);\n    }\n  }\n\n  public resize(w: number, h: number): void {\n    this._xAxisMat.resolution.set(w, h);\n    this._yAxisMat.resolution.set(w, h);\n    this._zAxisMat.resolution.set(w, h);\n  }\n}\n","// declare THREE as global available\ndeclare global {\n  // tslint:disable-next-line: interface-name\n  interface Window {\n    THREE: any;\n  }\n}\nimport * as THREE from 'three';\n// make THREE global available, this is needed for the examples from three.js\nwindow.THREE = THREE;\n\nimport { BoundingBox } from './boundingBox';\nimport { CrossHair } from './crossHair';\nimport { ParticleRenderer } from './particleRenderer';\nimport { SettingsGui } from './settingsGui';\n\nrequire('THREE.TrackballControls'); // tslint:disable-line:no-var-requires\n\nexport class ParticleEngine {\n  private _canvas: HTMLCanvasElement;\n  private _gl: WebGL2ComputeRenderingContext;\n  private _settingsGui: SettingsGui;\n  private _scene: THREE.Scene;\n  private _camera: THREE.PerspectiveCamera;\n  private _renderer: THREE.WebGLRenderer;\n  //private readonly _boundingBoxDimension = new THREE.Vector3(4.0, 4.0, 4.0);\n  private readonly _boundingBoxDimension = new THREE.Vector3(8.0, 5.0, 5.0);\n  private _boundingBox: BoundingBox;\n  private _crossHair: CrossHair;\n  private _controls: THREE.TrackballControls;\n  private _elapsed: number = 0;\n  private _particleRender: ParticleRenderer;\n\n  constructor(canvasId: string) {\n    this._canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    // const contexName = 'webgl2';\n    const contexName = 'webgl2-compute';\n    this._gl = this._canvas.getContext(contexName, {\n      antialias: true\n    });\n  }\n\n  public supportsWebGL2WithCompute(): boolean {\n    return this._gl ? true : false;\n  }\n\n  public createScene(): boolean {\n    this._settingsGui = new SettingsGui();\n\n    const w = this._canvas.clientWidth;\n    const h = this._canvas.clientHeight;\n\n    this._scene = new THREE.Scene();\n    this._camera = new THREE.PerspectiveCamera(45, w / h, 0.1, 100);\n    this._renderer = new THREE.WebGLRenderer({\n      canvas: this._canvas,\n      context: this._gl\n    });\n\n    this._renderer.setPixelRatio(window.devicePixelRatio);\n    this._renderer.setClearColor(0x000000, 0.0);\n    this._renderer.setSize(w, h, false);\n\n    // create the bounding box\n    this._boundingBox = new BoundingBox(this._boundingBoxDimension, this._scene, w, h);\n\n    // create the cross hair\n    this._crossHair = new CrossHair(\n      new THREE.Vector3(1.0, 1.0, 1.0),\n      this._boundingBoxDimension,\n      this._scene,\n      this._settingsGui.getSettings(),\n      w,\n      h\n    );\n\n    this._camera.position.z = 10;\n\n    this._controls = new THREE.TrackballControls(this._camera, this._canvas);\n    this._controls.rotateSpeed = 2.5;\n    this._controls.zoomSpeed = 2.5;\n    this._controls.panSpeed = 0.8;\n    this._controls.noZoom = false;\n    this._controls.noPan = true;\n    this._controls.staticMoving = true;\n    this._controls.dynamicDampingFactor = 0.3;\n    this._controls.keys = [65, 83, 68];\n    // this._controls.addEventListener('change', render);\n\n    this._particleRender = new ParticleRenderer(\n      this._gl,\n      this._camera,\n      this._settingsGui.getSettings(),\n      this._boundingBoxDimension\n    );\n    return this._particleRender.init();\n  }\n\n  public startRender(): void {\n    window.addEventListener('resize', () => {\n      const w = this._canvas.clientWidth;\n      const h = this._canvas.clientHeight;\n      this.resize(w, h);\n    });\n    this.animate(0);\n  }\n\n  private resize(w: number, h: number): void {\n    this._camera.aspect = w / h;\n    this._camera.updateProjectionMatrix();\n    this._renderer.setSize(w, h, false);\n\n    this._boundingBox.resize(w, h);\n    this._crossHair.resize(w, h);\n  }\n\n  private animate(time: number): void {\n    window.requestAnimationFrame((time: number) => {\n      this.animate(time);\n    });\n\n    const now = window.performance.now();\n    const delta = now - this._elapsed;\n    this._elapsed = now;\n\n    this._controls.update();\n    this._crossHair.update();\n    this._settingsGui.updateFrames(delta);\n\n    this._renderer.render(this._scene, this._camera);\n\n    this._particleRender.update(time / 1000);\n    this._renderer.state.reset();\n  }\n}\n","import * as THREE from 'three';\nimport { ISettings } from './settingsGui';\n\nexport class ParticleRenderer {\n  private _gl: WebGL2ComputeRenderingContext;\n  private _threeCamera: THREE.PerspectiveCamera;\n  private _settingsObject: ISettings;\n  private _boundingBox: THREE.Vector3;\n  private _particleCount: number = 0;\n  private _computeProgram: WebGLProgram;\n\n  private _shadingProgram: WebGLProgram;\n\n  // compute shader uniform locations\n  private _initLoc: WebGLUniformLocation;\n  private _particleCountLoc: WebGLUniformLocation;\n  private _boundingBoxLoc: WebGLUniformLocation;\n  private _deltaTimeLoc: WebGLUniformLocation;\n  private _gravityLoc: WebGLUniformLocation;\n  private _forceOnLoc: WebGLUniformLocation;\n  private _forcePositionsloc: WebGLUniformLocation;\n  private _forceLoc: WebGLUniformLocation;\n\n  // draw shader uniform locations\n  private _projectionMatrixLoc: WebGLUniformLocation;\n  private _viewMatrixLoc: WebGLUniformLocation;\n  private _colorLoc: WebGLUniformLocation;\n  private _pointSizeLoc: WebGLUniformLocation;\n\n  private _vao: WebGLVertexArrayObject;\n  private _posBuffer: WebGLBuffer;\n  private _velBuffer: WebGLBuffer;\n\n  private _lastTime: number = 0;\n  private _dispatchGroups: number;\n\n  constructor(\n    context: WebGL2ComputeRenderingContext,\n    camera: THREE.PerspectiveCamera,\n    settingsObject: ISettings,\n    bounding: THREE.Vector3\n  ) {\n    this._gl = context;\n    this._threeCamera = camera;\n    this._settingsObject = settingsObject;\n    this._boundingBox = bounding;\n  }\n\n  public init(): boolean {\n    this._logComputeThings();\n\n    // create compute shader\n    const computeShaderSource = require('../shaders/particle_compute.comp');\n    const computeShader = this._gl.createShader(this._gl.COMPUTE_SHADER);\n    this._gl.shaderSource(computeShader, computeShaderSource);\n    this._gl.compileShader(computeShader);\n    if (!this._gl.getShaderParameter(computeShader, this._gl.COMPILE_STATUS)) {\n      console.error(this._gl.getShaderInfoLog(computeShader));\n      return false;\n    }\n\n    // create compute shader program\n    this._computeProgram = this._gl.createProgram();\n    this._gl.attachShader(this._computeProgram, computeShader);\n    this._gl.linkProgram(this._computeProgram);\n    if (!this._gl.getProgramParameter(this._computeProgram, this._gl.LINK_STATUS)) {\n      console.error(this._gl.getProgramInfoLog(this._computeProgram));\n      return false;\n    }\n\n    // get the compute shader uniform locations\n    this._initLoc = this._gl.getUniformLocation(this._computeProgram, 'uiInit');\n    this._particleCountLoc = this._gl.getUniformLocation(this._computeProgram, 'uiParticleCount');\n    this._boundingBoxLoc = this._gl.getUniformLocation(this._computeProgram, 'v3BoundingBox');\n    this._deltaTimeLoc = this._gl.getUniformLocation(this._computeProgram, 'fDeltaTime');\n    this._gravityLoc = this._gl.getUniformLocation(this._computeProgram, 'fGravity');\n    this._forceOnLoc = this._gl.getUniformLocation(this._computeProgram, 'uiForce');\n    this._forcePositionsloc = this._gl.getUniformLocation(this._computeProgram, 'v3ForcePostion');\n    this._forceLoc = this._gl.getUniformLocation(this._computeProgram, 'fForce');\n\n    // create vertex array object\n    this._vao = this._gl.createVertexArray();\n\n    // create the buffers\n    this._posBuffer = this._gl.createBuffer();\n    this._velBuffer = this._gl.createBuffer();\n\n    // create vertex shader\n    const particleVertexShaderSource = require('../shaders/particle.vert');\n    const particleVertexShader = this._gl.createShader(this._gl.VERTEX_SHADER);\n    this._gl.shaderSource(particleVertexShader, particleVertexShaderSource);\n    this._gl.compileShader(particleVertexShader);\n    if (!this._gl.getShaderParameter(particleVertexShader, this._gl.COMPILE_STATUS)) {\n      console.log(this._gl.getShaderInfoLog(particleVertexShader));\n      return false;\n    }\n\n    const particleFragmentShaderSource = require('../shaders/particle.frag');\n    const particleFragmentShader = this._gl.createShader(this._gl.FRAGMENT_SHADER);\n    this._gl.shaderSource(particleFragmentShader, particleFragmentShaderSource);\n    this._gl.compileShader(particleFragmentShader);\n    if (!this._gl.getShaderParameter(particleFragmentShader, this._gl.COMPILE_STATUS)) {\n      console.log(this._gl.getShaderInfoLog(particleFragmentShader));\n      return false;\n    }\n\n    // create shader program\n    this._shadingProgram = this._gl.createProgram();\n    this._gl.attachShader(this._shadingProgram, particleVertexShader);\n    this._gl.attachShader(this._shadingProgram, particleFragmentShader);\n    this._gl.linkProgram(this._shadingProgram);\n    if (!this._gl.getProgramParameter(this._shadingProgram, this._gl.LINK_STATUS)) {\n      console.error(this._gl.getProgramInfoLog(this._shadingProgram));\n      return false;\n    }\n\n    this._gl.bindVertexArray(this._vao);\n    this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._posBuffer);\n\n    //this._gl.bufferData(this._gl.ARRAY_BUFFER, this._randomInit(), this._gl.STATIC_DRAW);\n\n    this._gl.enableVertexAttribArray(0);\n    this._gl.vertexAttribPointer(0, 4, this._gl.FLOAT, false, 0, 0);\n\n    this._projectionMatrixLoc = this._gl.getUniformLocation(this._shadingProgram, 'u_projectionMatrix');\n    this._viewMatrixLoc = this._gl.getUniformLocation(this._shadingProgram, 'u_viewMatrix');\n    this._colorLoc = this._gl.getUniformLocation(this._shadingProgram, 'u_color');\n    this._pointSizeLoc = this._gl.getUniformLocation(this._shadingProgram, 'u_pointSize');\n\n    this._gl.bindVertexArray(null);\n\n    this._gl.enable(this._gl.BLEND);\n    this._gl.blendFunc(this._gl.SRC_ALPHA, this._gl.ONE);\n\n    return true;\n  }\n\n  public update(time: number): void {\n    const duration = time - this._lastTime;\n    //console.log(`duration: ${duration}`);\n    this._lastTime = time;\n\n    const runmode = this._resizeBuffers() ? 1 : 0;\n\n    // compute\n\n    this._gl.useProgram(this._computeProgram);\n\n    this._gl.uniform1ui(this._initLoc, runmode); // fix this\n    this._gl.uniform1ui(this._particleCountLoc, this._particleCount);\n    this._gl.uniform3fv(this._boundingBoxLoc, this._boundingBox.toArray());\n    this._gl.uniform1f(this._deltaTimeLoc, duration);\n    this._gl.uniform1f(this._gravityLoc, this._settingsObject.gravity);\n    this._gl.uniform1ui(this._forceOnLoc, this._settingsObject.forceActive ? 1 : 0);\n    this._gl.uniform3fv(this._forcePositionsloc, this._settingsObject.forcePosition.toArray());\n    this._gl.uniform1f(this._forceLoc, this._settingsObject.force);\n    this._gl.dispatchCompute(this._dispatchGroups, 1, 1);\n    this._gl.memoryBarrier(this._gl.VERTEX_ATTRIB_ARRAY_BARRIER_BIT);\n\n    // rendering\n    this._gl.useProgram(this._shadingProgram);\n    this._gl.bindVertexArray(this._vao);\n\n    this._gl.uniformMatrix4fv(this._projectionMatrixLoc, false, this._threeCamera.projectionMatrix.toArray());\n    this._gl.uniformMatrix4fv(this._viewMatrixLoc, false, this._threeCamera.matrixWorldInverse.toArray());\n    this._gl.uniform4fv(this._colorLoc, this._settingsObject.color.toArray());\n    this._gl.uniform1f(this._pointSizeLoc, this._settingsObject.particleSize);\n\n    this._gl.drawArrays(this._gl.POINTS, 0, this._particleCount);\n\n    this._gl.bindVertexArray(null);\n  }\n\n  private _logComputeThings(): void {\n    const maxComputeWorkGroupCount = [];\n    const maxComputeWorkGroupSize = [];\n\n    for (let i = 0; i < 3; i++) {\n      maxComputeWorkGroupCount.push(this._gl.getIndexedParameter(this._gl.MAX_COMPUTE_WORK_GROUP_COUNT, i));\n      maxComputeWorkGroupSize.push(this._gl.getIndexedParameter(this._gl.MAX_COMPUTE_WORK_GROUP_SIZE, i));\n    }\n    console.log(`max global (total) work group sizes ${maxComputeWorkGroupCount.join()}`);\n    console.log(`max local (in one shader) work group sizes ${maxComputeWorkGroupSize.join()}`);\n    console.log(\n      `max local work group invocations: ${this._gl.getParameter(this._gl.MAX_COMPUTE_WORK_GROUP_INVOCATIONS)}`\n    );\n  }\n\n  private _resizeBuffers(): boolean {\n    const newParticleCount = Math.pow(this._settingsObject.particlesPerDimension, 3);\n    if (newParticleCount !== this._particleCount) {\n      this._particleCount = newParticleCount;\n\n      this._dispatchGroups = Math.trunc(this._particleCount / 1024) + 1;\n\n      /**/\n      this._gl.bindBuffer(this._gl.SHADER_STORAGE_BUFFER, this._posBuffer);\n      this._gl.bufferData(\n        this._gl.SHADER_STORAGE_BUFFER,\n        new Float32Array(this._particleCount * 4),\n        this._gl.DYNAMIC_COPY\n      );\n      this._gl.bindBufferBase(this._gl.SHADER_STORAGE_BUFFER, 0, this._posBuffer);\n\n      this._gl.bindBuffer(this._gl.SHADER_STORAGE_BUFFER, this._velBuffer);\n      this._gl.bufferData(\n        this._gl.SHADER_STORAGE_BUFFER,\n        new Float32Array(this._particleCount * 4),\n        this._gl.DYNAMIC_COPY\n      );\n      this._gl.bindBufferBase(this._gl.SHADER_STORAGE_BUFFER, 1, this._velBuffer);\n      /**/\n\n      /*/\n      this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._posBuffer);\n      this._gl.bufferData(this._gl.ARRAY_BUFFER, this._randomInit(), this._gl.STATIC_DRAW);\n      /**/\n\n      return true;\n    }\n    return false;\n  }\n\n  private _randomInit(): Float32Array {\n    const vertices = new Float32Array(this._particleCount * 4);\n\n    // calc cubic root\n    const n = Math.pow(this._particleCount, 1.0 / 3.0);\n    const dx = this._boundingBox.x / (n + 1.0);\n    const dy = this._boundingBox.y / (n + 1.0);\n    const dz = this._boundingBox.z / (n + 1.0);\n\n    for (let i = 0; i < this._particleCount; i++) {\n      const px = (i % n) * dx + dx - this._boundingBox.x / 2;\n      const py = Math.trunc((i / n) % n) * dy + dy - this._boundingBox.y / 2;\n      const pz = Math.trunc((i / Math.pow(n, 2)) % n) * dz + dz - this._boundingBox.z / 2;\n\n      let vi = i * 4;\n      vertices[vi] = px;\n      vertices[++vi] = py;\n      vertices[++vi] = pz;\n      vertices[++vi] = 0; // 4th component\n    }\n\n    return vertices;\n  }\n}\n","import * as $ from 'jquery';\nimport * as THREE from 'three';\n\nconst Picker = require('vanilla-picker'); // tslint:disable-line:no-var-requires variable-name\n\nexport interface ISettings {\n  particlesPerDimension: number;\n  gravity: number;\n  particleSize: number;\n  force: number;\n  forceActive: boolean;\n  forcePosition?: THREE.Vector3;\n  color: THREE.Vector4;\n}\n\nexport class SettingsGui {\n  private _settingsPanel: JQuery<HTMLElement>;\n  private _settingsButton: JQuery<HTMLElement>;\n\n  private _particleCountSlider: JQuery<HTMLInputElement>;\n  private _particleCountText: JQuery<HTMLElement>;\n\n  private _gravitySlider: JQuery<HTMLInputElement>;\n  private _gravityText: JQuery<HTMLElement>;\n\n  private _particleSizeSlider: JQuery<HTMLInputElement>;\n  private _particleSizeText: JQuery<HTMLElement>;\n\n  private _forceSlider: JQuery<HTMLInputElement>;\n  private _forceText: JQuery<HTMLElement>;\n\n  private _colorPicker: any;\n  private _perf: JQuery<HTMLElement>;\n  private _totalParticle: JQuery<HTMLElement>;\n  private _settings: ISettings;\n\n  constructor() {\n    this._settingsButton = $('#settingsButton');\n    this._settingsPanel = $('#settings');\n\n    this._particleCountSlider = this._settingsPanel.find('#particleCount') as JQuery<HTMLInputElement>;\n    this._particleCountText = this._settingsPanel.find('#particleCountText');\n\n    this._gravitySlider = this._settingsPanel.find('#gravity') as JQuery<HTMLInputElement>;\n    this._gravityText = this._settingsPanel.find('#gravityText');\n\n    this._particleSizeSlider = this._settingsPanel.find('#particleSize') as JQuery<HTMLInputElement>;\n    this._particleSizeText = this._settingsPanel.find('#particleSizeText');\n\n    this._forceSlider = this._settingsPanel.find('#force') as JQuery<HTMLInputElement>;\n    this._forceText = this._settingsPanel.find('#forceText');\n\n    this._perf = this._settingsPanel.find('#perf');\n    this._totalParticle = this._settingsPanel.find('#totalParticle');\n\n    this._colorPicker = new Picker({\n      parent: this._settingsPanel.find('#colorPicker')[0],\n      popup: false,\n      alpha: true,\n      editor: false,\n      color: '#ff0000',\n      onChange: (color) => {\n        const rgba = color.rgba;\n        if (this._settings) {\n          this._settings.color.set(rgba[0] / 255, rgba[1] / 255, rgba[2] / 255, rgba[3]);\n        }\n      }\n    });\n\n    this._settingsButton.on('click', () => {\n      const settingsButtonIcon = this._settingsButton.find('[data-fa-i2svg]');\n      this._settingsPanel.toggleClass('visible');\n      this._settingsButton.toggleClass('moved');\n\n      settingsButtonIcon.toggleClass('fa-bars');\n      settingsButtonIcon.toggleClass('fa-times-circle');\n    });\n\n    this._settingsPanel.find('#btnSetDefault').on('click', () => {\n      this.setDefault();\n    });\n\n    this._particleCountSlider.on('input change', () => {\n      this._settings.particlesPerDimension = this._particleCountSlider.val() as number;\n      this.updateGUI();\n    });\n\n    this._gravitySlider.on('input change', () => {\n      this._settings.gravity = this._gravitySlider.val() as number;\n      this.updateGUI();\n    });\n\n    this._particleSizeSlider.on('input change', () => {\n      this._settings.particleSize = this._particleSizeSlider.val() as number;\n      this.updateGUI();\n    });\n\n    this._forceSlider.on('input change', () => {\n      this._settings.force = this._forceSlider.val() as number;\n      this.updateGUI();\n    });\n\n    this.setDefault();\n  }\n\n  public getSettings(): ISettings {\n    return this._settings;\n  }\n\n  public updateFrames(delta: number) {\n    this._perf.html(`${delta.toFixed(2)} (${(1000 / delta).toFixed(1)} FPS)`);\n  }\n\n  private setDefault(): void {\n    if (!this._settings) {\n      this._settings = {\n        color: new THREE.Vector4(1.0, 0.0, 0.0, 1.0),\n        force: 0.1,\n        forceActive: false,\n        forcePosition: new THREE.Vector3(),\n        gravity: 0.98,\n        particleSize: 1.0,\n        particlesPerDimension: 50\n      };\n    } else {\n      this._settings.color.set(1.0, 0.0, 0.0, 1.0);\n      this._settings.force = 0.1;\n      this._settings.forceActive = false;\n      this._settings.forcePosition.set(0, 0, 0);\n      this._settings.gravity = 0.98;\n      this._settings.particleSize = 1.0;\n      this._settings.particlesPerDimension = 50;\n    }\n\n    this.updateGUI();\n  }\n\n  private updateGUI(): void {\n    this._particleCountSlider.val(this._settings.particlesPerDimension);\n    this._particleCountText.html(this._settings.particlesPerDimension.toString());\n    this._totalParticle.html(Math.pow(this._settings.particlesPerDimension, 3).toLocaleString());\n\n    this._gravitySlider.val(this._settings.gravity);\n    this._gravityText.html(this._settings.gravity.toString());\n\n    this._particleSizeSlider.val(this._settings.particleSize);\n    this._particleSizeText.html(this._settings.particleSize.toString());\n\n    this._forceSlider.val(this._settings.force);\n    this._forceText.html(this._settings.force.toString());\n\n    const rgba = this._settings.color.toArray();\n    rgba[0] *= 255;\n    rgba[1] *= 255;\n    rgba[2] *= 255;\n\n    this._colorPicker.setColor(rgba, true);\n  }\n}\n"]}