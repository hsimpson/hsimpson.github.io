{"version":3,"sources":["webpack:///./src/components/seo.tsx","webpack:///./src/pages/index.tsx"],"names":["SEO","description","lang","meta","title","siteMetadata","useSiteMetadata","metaDescription","defaultTitle","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","useStyles","makeStyles","_theme","createStyles","rootimage","position","top","left","right","bottom","width","height","objectFit","filter","root","padding","flexGrow","fontSize","link","color","textDecoration","IndexPage","classes","className","src","to"],"mappings":"2FAAA,iDAYA,SAASA,EAAT,GAAqE,IAAtDC,EAAsD,EAAtDA,YAAaC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAChCC,EAAeC,cAEfC,EAAkBN,GAAeI,EAAaJ,YAC9CO,EAAeH,EAAaD,MAElC,OACE,kBAAC,IAAD,CACEK,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAeF,EAAe,QAAQA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAASR,GAEX,CACES,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,SAASP,aAAA,EAAAA,EAAcS,SAAU,IAEnC,CACEH,KAAM,gBACNC,QAASR,GAEX,CACEO,KAAM,sBACNC,QAASL,IAEXQ,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAM,KACNC,KAAM,GACNF,YAAa,IAUAD,O,kCC5Ef,wGAQMiB,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,UAAW,CACTC,SAAU,WACVC,IAAK,OACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,OACR,QAAS,CACPC,MAAO,OACPC,OAAQ,OACRC,UAAW,QACXC,OAAQ,8BAGZC,KAAM,CACJT,SAAU,WACVC,IAAK,OACLC,KAAM,EACNE,OAAQ,OACRD,MAAO,EACPO,QAAS,OACTC,SAAU,EACV,MAAO,CACLC,SAAU,WAGdC,KAAM,CACJC,MAAO,UACPC,eAAgB,mBAChB,UAAW,CACTD,MAAO,iBAyCAE,UAnCG,WAA0B,IAClCxB,EAAWR,cAAXQ,OACFyB,EAAUtB,IAEhB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKb,MAAM,SACX,yBAAKoC,UAAWD,EAAQlB,WACtB,yBAAKoB,IAAI,+BAEX,yBAAKD,UAAWD,EAAQR,MACtB,4BAAKjB,GACL,wFAC6D,IAC3D,kBAAC,IAAD,CAAM0B,UAAWD,EAAQJ,KAAMO,GAAE,aAAjC,cAIF,iDACsB,IACpB,kBAAC,IAAD,CAAMF,UAAWD,EAAQJ,KAAMO,GAAE,UAAjC,gBAIF,kEACuC,IACrC,kBAAC,IAAD,CAAMF,UAAWD,EAAQJ,KAAMO,GAAE,UAAjC","file":"component---src-pages-index-tsx-697e2220e37a908770fa.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useSiteMetadata } from '../hooks/useSiteMetaData';\n\nfunction SEO({ description, lang, meta, title }): React.ReactElement {\n  const siteMetadata = useSiteMetadata();\n\n  const metaDescription = description || siteMetadata.description;\n  const defaultTitle = siteMetadata.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: siteMetadata?.author || '',\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Layout from '../components/layout';\nimport { Link } from 'gatsby';\nimport SEO from '../components/seo';\nimport { useSiteMetadata } from '../hooks/useSiteMetaData';\n\nconst useStyles = makeStyles((_theme: Theme) =>\n  createStyles({\n    rootimage: {\n      position: 'absolute',\n      top: '64px',\n      left: 0,\n      right: 0,\n      bottom: '64px',\n      '& img': {\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover',\n        filter: 'brightness(50%) blur(2px)',\n      },\n    },\n    root: {\n      position: 'absolute',\n      top: '64px',\n      left: 0,\n      bottom: '64px',\n      right: 0,\n      padding: '16px',\n      flexGrow: 1,\n      '& p': {\n        fontSize: '1.2rem',\n      },\n    },\n    link: {\n      color: '#8ab4f8',\n      textDecoration: 'underline dotted',\n      '&:hover': {\n        color: '#d2603a',\n      },\n    },\n  })\n);\n\nconst IndexPage = (): React.ReactElement => {\n  const { author } = useSiteMetadata();\n  const classes = useStyles();\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div className={classes.rootimage}>\n        <img src=\"/images/newton-gradle.png\"></img>\n      </div>\n      <div className={classes.root}>\n        <h1>{author}</h1>\n        <p>\n          Welcome to my site. On this site I show some of my private{' '}\n          <Link className={classes.link} to={`/projects`}>\n            projects.\n          </Link>\n        </p>\n        <p>\n          I will also do some{' '}\n          <Link className={classes.link} to={`/posts`}>\n            blog posts.\n          </Link>\n        </p>\n        <p>\n          There are also some more information{' '}\n          <Link className={classes.link} to={`/about`}>\n            about me.\n          </Link>\n        </p>\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}